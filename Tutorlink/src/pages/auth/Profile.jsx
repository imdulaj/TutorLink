import {
  Container,
  Box,
  Typography,
  Paper,
  Avatar,
  Grid,
  Button,
  Divider,
  TextField,
  CircularProgress,
  Alert,
  Snackbar,
} from "@mui/material";
import { FaUser, FaPencilAlt, FaTrash, FaFileDownload } from "react-icons/fa";
import { useEffect, useState, useRef } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import * as jwtDecode from "jwt-decode";
import { Link } from "react-router-dom";
import jsPDF from "jspdf";
import "./Profile.css";
import { Header } from "../../components/Header/Header";
import { Footer } from "../../components/Footer/Footer";

export function Profile() {
  const [studentData, setStudentData] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [uploadError, setUploadError] = useState("");
  const navigate = useNavigate();
  const fileInputRef = useRef();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:3000/api/profile", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setStudentData(response.data);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch profile data");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, []);

  const handleUpdateProfile = () => {
    navigate("/UpdateUser", { state: { studentData } });
  };

  const handleDeleteAccount = async () => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete your account?"
    );
    if (confirmDelete) {
      try {
        const token = localStorage.getItem("token");
        await axios.delete("http://localhost:3000/api/profile", {
          headers: { Authorization: `Bearer ${token}` },
        });

        alert("Account deleted successfully.");
        localStorage.removeItem("token");
        navigate("/");
      } catch (err) {
        console.error("Error deleting account:", err);
        alert("Failed to delete account.");
      }
    }
  };

  const handleGenerateReport = () => {
    const doc = new jsPDF();
    const logoBase64 = ""; // replace with your image
    doc.addImage(logoBase64, "JPEG", 80, 5, 40, 40);
    doc.setFontSize(20);
    doc.setTextColor(0, 102, 204);
    doc.text("Student Profile Report", 105, 40, null, null, "center");
    doc.setDrawColor(0, 102, 204);
    doc.setLineWidth(1);
    doc.line(20, 45, 190, 45);
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    let y = 60;
    const lineSpacing = 10;
    doc.text(`Name: ${studentData.name || "N/A"}`, 20, y);
    y += lineSpacing;
    doc.text(`Email: ${studentData.email || "N/A"}`, 20, y);
    y += lineSpacing;
    doc.text(
      `Registration Number: ${studentData.registrationNumber || "N/A"}`,
      20,
      y
    );
    y += lineSpacing;
    doc.text(`Contact Number: ${studentData.contactNumber || "N/A"}`, 20, y);
    y += lineSpacing;
    doc.text(`Stream: ${studentData.stream || "N/A"}`, 20, y);
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by Our Platform", 105, 280, null, null, "center");
    doc.save("Student_Profile_Report.pdf");
  };

  const handleAvatarClick = () => {
    fileInputRef.current.click(); // trigger hidden file input
  };

  const handleFileChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;
  
    const formData = new FormData();
    formData.append("profilePicture", file); // âœ… must match multer key
  
    try {
      const token = localStorage.getItem("token");
      const response = await axios.post(
        "http://localhost:3000/api/profile/upload",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: `Bearer ${token}`,
          }
        }
      );
  
      const imageUrl = `http://localhost:3000/${response.data.profilePicture}`;
      setStudentData((prev) => ({
        ...prev,
        photoUrl: imageUrl, // Update the state immediately with the new photo URL
      }));
      setUploadSuccess(true);
      setUploadError("");
    } catch (err) {
      console.error("Upload error:", err);
      setUploadError(
        err.response?.data?.message || "Failed to upload profile picture"
      );
    }
  };

  if (loading) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
      >
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <>
      <Header />
      <Container component="main" maxWidth="md" className="profile-container">
        <Paper elevation={3} className="profile-paper">
          <Box className="profile-header">
            <input
              type="file"
              accept="image/*"
              ref={fileInputRef}
              style={{ display: "none" }}
              onChange={handleFileChange}
            />
            <Avatar
  className="profile-avatar"
  onClick={handleAvatarClick}
  sx={{ width: 80, height: 80, cursor: "pointer" }}
  src={`http://localhost:3000/${studentData.photoUrl}` || "/images/default-profile.jpg"}
>
  {!studentData.photoUrl && <FaUser size={40} />}
</Avatar>
            <Typography variant="h4" className="profile-name">
              Student Profile
            </Typography>
          </Box>

          <Divider className="profile-divider" />

          <Grid container spacing={3} className="profile-form">
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Name"
                value={studentData.name || ""}
                className="profile-input"
                InputProps={{ readOnly: true }}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Email"
                value={studentData.email || ""}
                className="profile-input"
                InputProps={{ readOnly: true }}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Registration Number"
                value={studentData.registrationNumber || ""}
                className="profile-input"
                InputProps={{ readOnly: true }}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="Contact Number"
                value={studentData.contactNumber || ""}
                className="profile-input"
                InputProps={{ readOnly: true }}
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Stream"
                value={studentData.stream || ""}
                className="profile-input"
                InputProps={{ readOnly: true }}
              />
            </Grid>
          </Grid>

          <Box className="profile-actions" display="flex" gap={2} mt={3}>
            <Link to="/UpdateUser">
              <Button
                variant="contained"
                color="primary"
                startIcon={<FaPencilAlt />}
                onClick={handleUpdateProfile}
                className="update-button"
              >
                Update Details
              </Button>
            </Link>

            <Button
              variant="outlined"
              startIcon={<FaTrash />}
              onClick={handleDeleteAccount}
              className="delete-button"
            >
              Delete Account
            </Button>

            <Button
              variant="contained"
              color="secondary"
              startIcon={<FaFileDownload />}
              onClick={handleGenerateReport}
              className="report-button"
            >
              Download Report
            </Button>
          </Box>
        </Paper>
      </Container>
      <Snackbar
        open={uploadSuccess}
        autoHideDuration={4000}
        onClose={() => setUploadSuccess(false)}
        message="Profile picture uploaded successfully!"
      />
      {uploadError && (
        <Snackbar
          open={!!uploadError}
          autoHideDuration={4000}
          onClose={() => setUploadError("")}
          message={uploadError}
          severity="error"
        />
      )}
      <Footer />
    </>
  );
}
