import {
  Container,
  Box,
  Typography,
  Paper,
  Avatar,
  Grid,
  Button,
  Divider,
  TextField,
  CircularProgress,
  Alert,
  Snackbar,
} from "@mui/material";
import { FaUser, FaPencilAlt, FaTrash, FaFileDownload } from "react-icons/fa";
import { useEffect, useState, useRef } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { Link } from "react-router-dom";
import jsPDF from "jspdf";
import "./Profile.css";
import { Header } from "../../components/Header/Header";
import { Footer } from "../../components/Footer/Footer";

export function Profile() {
  const [studentData, setStudentData] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const [uploadError, setUploadError] = useState("");
  const navigate = useNavigate();
  const fileInputRef = useRef();

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get("http://localhost:3000/api/profile", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        setStudentData(response.data);
      } catch (err) {
        setError(err.response?.data?.message || "Failed to fetch profile data");
      } finally {
        setLoading(false);
      }
    };

    fetchProfile();
  }, []);

  const handleUpdateProfile = () => {
    navigate("/UpdateUser", { state: { studentData } });
  };

  const handleDeleteAccount = async () => {
    const confirmDelete = window.confirm(
      "Are you sure you want to delete your account?"
    );
    if (confirmDelete) {
      try {
        const token = localStorage.getItem("token");
        await axios.delete("http://localhost:3000/api/profile", {
          headers: { Authorization: `Bearer ${token}` },
        });

        alert("Account deleted successfully.");
        localStorage.removeItem("token");
        navigate("/");
      } catch (err) {
        console.error("Error deleting account:", err);
        alert("Failed to delete account.");
      }
    }
  };

  const handleGenerateReport = async () => {
    const doc = new jsPDF();
    doc.setFontSize(20);
    doc.setTextColor(0, 102, 204);
    doc.text("Student Profile Report", 105, 20, null, null, "center");

    // Draw a line
    doc.setDrawColor(0, 102, 204);
    doc.setLineWidth(1);
    doc.line(20, 25, 190, 25);

    // Set profile picture position
    const imageX = 80;
    const imageY = 30;
    const imageSize = 50;

    try {
      if (studentData.profilePicture) {
        const imageUrl = `http://localhost:3000${studentData.profilePicture}`;

        // Fetch image and convert to base64
        const response = await fetch(imageUrl);
        const blob = await response.blob();
        const reader = new FileReader();

        reader.onloadend = function () {
          const base64data = reader.result;
          doc.addImage(base64data, "JPEG", imageX, imageY, imageSize, imageSize);

          // Add text below image
          let y = imageY + imageSize + 10;
          const lineSpacing = 10;
          doc.setFontSize(12);
          doc.setTextColor(0, 0, 0);
          doc.text(`Name: ${studentData.name || "N/A"}`, 20, y);
          y += lineSpacing;
          doc.text(`Email: ${studentData.email || "N/A"}`, 20, y);
          y += lineSpacing;
          doc.text(
            `Registration Number: ${studentData.registrationNumber || "N/A"}`,
            20,
            y
          );
          y += lineSpacing;
          doc.text(`Contact Number: ${studentData.contactNumber || "N/A"}`, 20, y);
          y += lineSpacing;
          doc.text(`Stream: ${studentData.stream || "N/A"}`, 20, y);

          // Footer
          doc.setFontSize(10);
          doc.setTextColor(100);
          doc.text("Generated by Our Platform", 105, 280, null, null, "center");

          doc.save("Student_Profile_Report.pdf");
        };

        reader.readAsDataURL(blob);
      } else {
        // No image uploaded â†’ skip image
        let y = 40;
        const lineSpacing = 10;
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`Name: ${studentData.name || "N/A"}`, 20, y);
        y += lineSpacing;
        doc.text(`Email: ${studentData.email || "N/A"}`, 20, y);
        y += lineSpacing;
        doc.text(
          `Registration Number: ${studentData.registrationNumber || "N/A"}`,
          20,
          y
        );
        y += lineSpacing;
        doc.text(`Contact Number: ${studentData.contactNumber || "N/A"}`, 20, y);
        y += lineSpacing;
        doc.text(`Stream: ${studentData.stream || "N/A"}`, 20, y);

        doc.setFontSize(10);
        doc.setTextColor(100);
        doc.text("Generated by Our Platform", 105, 280, null, null, "center");

        doc.save("Student_Profile_Report.pdf");
      }
    } catch (err) {
      console.error("Error generating report with image:", err);
      alert("Failed to add profile picture to PDF. Generating text-only report.");
      // fallback to text-only report
      let y = 40;
      const lineSpacing = 10;
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Name: ${studentData.name || "N/A"}`, 20, y);
      y += lineSpacing;
      doc.text(`Email: ${studentData.email || "N/A"}`, 20, y);
      y += lineSpacing;
      doc.text(
        `Registration Number: ${studentData.registrationNumber || "N/A"}`,
        20,
        y
      );
      y += lineSpacing;
      doc.text(`Contact Number: ${studentData.contactNumber || "N/A"}`, 20, y);
      y += lineSpacing;
      doc.text(`Stream: ${studentData.stream || "N/A"}`, 20, y);

      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text("Generated by Tutorlink", 105, 280, null, null, "center");

      doc.save("Student_Profile_Report.pdf");
    }
  };

  const handleAvatarClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("profilePicture", file);

    try {
      const token = localStorage.getItem("token");
      const response = await axios.post(
        "http://localhost:3000/api/profile/upload",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const imageUrl = response.data.profilePicture;
      setStudentData((prev) => ({
        ...prev,
        profilePicture: imageUrl,
      }));

      setUploadSuccess(true);
      setUploadError("");
    } catch (err) {
      console.error("Upload error:", err);
      setUploadError(
        err.response?.data?.message || "Failed to upload profile picture"
      );
    }
  };

  if (loading) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
      >
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        alignItems="center"
        height="100vh"
      >
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <>
      <Header />
      <Container component="main" maxWidth="md" className="profile-container">
        <Paper elevation={3} className="profile-paper">
          <Grid container spacing={3}>
            <Grid item xs={12} md={4}>
              <Box display="flex" flexDirection="column" alignItems="center">
                <input
                  type="file"
                  accept="image/*"
                  ref={fileInputRef}
                  style={{ display: "none" }}
                  onChange={handleFileChange}
                />
                <Avatar
                  onClick={handleAvatarClick}
                  sx={{ width: 150, height: 150, cursor: "pointer" }}
                  src={
                    studentData.profilePicture
                      ? `http://localhost:3000${studentData.profilePicture}`
                      : "/uploads/pic.png"
                  }
                >
                  {!studentData.profilePicture && <FaUser size={60} />}
                </Avatar>
                <Typography variant="h6" mt={2}>
                  {studentData.name || "Student Profile"}
                </Typography>
              </Box>
            </Grid>

            <Grid item xs={12} md={8}>
              <Typography variant="h4" gutterBottom>
                Profile Details
              </Typography>
              <Divider sx={{ mb: 2 }} />

              <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Name"
                    value={studentData.name || ""}
                    InputProps={{ readOnly: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Email"
                    value={studentData.email || ""}
                    InputProps={{ readOnly: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Registration Number"
                    value={studentData.registrationNumber || ""}
                    InputProps={{ readOnly: true }}
                  />
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Contact Number"
                    value={studentData.contactNumber || ""}
                    InputProps={{ readOnly: true }}
                  />
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Stream"
                    value={studentData.stream || ""}
                    InputProps={{ readOnly: true }}
                  />
                </Grid>
              </Grid>

              <Box display="flex" gap={2} mt={3}>
                <Link to="/UpdateUser">
                  <Button
                    variant="contained"
                    color="primary"
                    startIcon={<FaPencilAlt />}
                    onClick={handleUpdateProfile}
                  >
                    Update Details
                  </Button>
                </Link>

                <Button
                  variant="outlined"
                  startIcon={<FaTrash />}
                  onClick={handleDeleteAccount}
                >
                  Delete Account
                </Button>

                <Button
                  variant="contained"
                  color="secondary"
                  startIcon={<FaFileDownload />}
                  onClick={handleGenerateReport}
                >
                  Download Report
                </Button>
              </Box>
            </Grid>
          </Grid>
        </Paper>
      </Container>

      <Snackbar
        open={uploadSuccess}
        autoHideDuration={4000}
        onClose={() => setUploadSuccess(false)}
      >
        <Alert severity="success" onClose={() => setUploadSuccess(false)}>
          Profile picture uploaded successfully!
        </Alert>
      </Snackbar>

      <Snackbar
        open={!!uploadError}
        autoHideDuration={4000}
        onClose={() => setUploadError("")}
      >
        <Alert severity="error" onClose={() => setUploadError("")}>
          {uploadError}
        </Alert>
      </Snackbar>
      <Footer />
    </>
  );
}
